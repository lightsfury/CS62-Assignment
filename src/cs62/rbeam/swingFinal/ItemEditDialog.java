package cs62.rbeam.swingFinal;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.Vector;

import javax.imageio.*;
import javax.swing.*;

import cs62.rbeam.swingFinal.DataInterface.DataEntry;

//Dialog used to add and edit items
class ItemEditDialog extends JDialog
{
    private static final long serialVersionUID = 1L;
    
	// Similar to AWT listeners. This one is used to capture the "Submit" button on the dialog
	public interface SubmitListener
	{
		public void dialogSubmit(int rowIndex, DataEntry entry);
		
		public void dialogCancel();
	}
	
	public ItemEditDialog(Frame parentFrame)
	{
		// All good modal dialogs need a parent frame
		super(parentFrame, "Edit item", true);
		// Don't do anything foolish if the window is closed
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		
		init();
		
		pack();
	}

	public void addSubmitListener(SubmitListener submitListener)
	{
		// Lazy allocate the listeners
		if (listeners == null)
		{
			listeners = new Vector<SubmitListener>(2);
		}
		
		// And add the listener
		listeners.add(submitListener);
	}
	
	public void removeSubmitListener(SubmitListener submitListener)
	{
		if (listeners != null)
		{
			listeners.remove(submitListener);
		}
	}
	
	protected void fireSubmitListeners()
	{
		// And dispatch the listeners
		if (listeners != null)
		{
			for (SubmitListener l : listeners)
			{
				if (l != null)
				{
					l.dialogSubmit(rowIndex, entry);
				}
			}
		}
	}
	
	protected void fireCancelListeners()
	{
		if (listeners != null)
		{
			for (SubmitListener l : listeners)
			{
				l.dialogCancel();
			}
		}
	}

	protected void onCancel()
	{
		// The user clicked the cancel button
		// So hide the dialog
		setVisible(false);
		
		// And dispose of it
		dispose();
		
		fireCancelListeners();
	}
	
	protected void onSubmit()
	{
		// The user clicked the submit button
		// So hide the dialog
		setVisible(false);
		
		// Save the data
		saveData();
		
		// And dispatch the listeners
		fireSubmitListeners();
	}
	
	public void setDataRow(int row, DataEntry rowData)
    {
		rowIndex = row;
		entry = rowData;
		loadData();
		pack();
    }
	
	public void setActiveTab(int column)
    {
		tabs.setSelectedIndex(column);
    }
	
	private void loadData()
	{
		DataEntry rowData = entry;
		
		// Load the ID
		if (rowData.GenerateID)
		{
			currentID.setText("Autogenerated");
		}
		else
		{
			currentID.setText(Integer.toString(rowData.IDNumber));
		}
		
		// Load the quantity
		currentQuantity.setText(Integer.toString(rowData.Quantity));
		
		// Load the name
		currentName.setText(rowData.Name);
		
		// Load the description
		currentDesc.setText(rowData.Description);
		
		// Load the image
		if (rowData.ImageData != null)
		{
			currentImageData = Arrays.copyOf(rowData.ImageData, rowData.ImageData.length);
			ImageIcon icon = new ImageIcon(currentImageData);
			currentImage.setIcon(icon);
			newImage.setIcon(icon);
		}
		else
		{
			currentImageData = null;
			newImageData = null;
			currentImage.setIcon(null);
			currentImage.setText("No image selected");
			newImage.setIcon(null);
			newImage.setText("No image selected");
		}
		
		// And copy the data over to the new* containers
		newID.setText(currentID.getText());
		newQuantity.setText(currentQuantity.getText());
		newName.setText(currentName.getText());
		newDesc.setText(currentDesc.getText());
		
		// Make sure the generate ID toggle is checked
		autoGenNewID.setSelected(rowData.GenerateID);
		// And update the ID input field to match
		updateIDField();
	}
	
	private void saveData()
	{
		entry = new DataEntry();
		
		entry.GenerateID = autoGenNewID.isSelected();
		if (!entry.GenerateID)
		{
			entry.IDNumber = Integer.parseInt(newID.getText());
		}
		
		entry.Quantity = Integer.parseInt(newQuantity.getText());
		
		entry.Name = newName.getText();
		
		entry.Description = newDesc.getText();
		
		if (newImageData != null)
		{
			entry.ImageData = newImageData;
			entry.ImageMIME = "image/jpeg"; // Everything is a jpeg
			newImageData = null;
		}
		else
		{
		}
	}

	private void init()
	{
		setLayout(new BorderLayout(5, 5));
		
		tabs = new JTabbedPane(JTabbedPane.TOP, JTabbedPane.SCROLL_TAB_LAYOUT);
		
		add(tabs, BorderLayout.CENTER);
		
		JPanel pane, pane2;
		
		// Build the ID tab
		pane = new JPanel();
		pane.setLayout(new BoxLayout(pane, BoxLayout.PAGE_AXIS));
		
		// The current ID line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("Current ID:"));
		currentID = new JTextField(20);
		currentID.setEnabled(false);
		pane2.add(currentID);
		pane.add(pane2);
		
		// The new ID line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("New ID:"));
		newID = new JTextField(20);
		pane2.add(newID);
		autoGenNewID = new JCheckBox("Automatically generate the ID number");
		autoGenNewID.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e)
			{
				ItemEditDialog.this.updateIDField();
			}
		});
		pane2.add(autoGenNewID);
		pane.add(pane2);
		
		tabs.addTab("ID", pane);
		
		// Build the quantity tab
		pane = new JPanel();
		pane.setLayout(new BoxLayout(pane, BoxLayout.PAGE_AXIS));
		
		// The current quantity line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("Current Quantity:"));
		currentQuantity = new JTextField(20);
		currentQuantity.setEnabled(false);
		pane2.add(currentQuantity);
		pane.add(pane2);
		
		// The new quantity line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("New Quantity:"));
		newQuantity = new JTextField(20);
		pane2.add(newQuantity);
		pane.add(pane2);
		
		tabs.addTab("Quantity", pane);
		
		// Build the name tab
		pane = new JPanel();
		pane.setLayout(new BoxLayout(pane, BoxLayout.PAGE_AXIS));
		
		// The current name line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("Current Name:"));
		currentName = new JTextField(20);
		currentName.setEnabled(false);
		pane2.add(currentName);
		pane.add(pane2);
		
		// The new name line
		pane2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pane2.add(new JLabel("New Name:"));
		newName = new JTextField(20);
		pane2.add(newName);
		pane.add(pane2);
		
		tabs.addTab("Name", pane);
		
		// Build the description tab
		pane = new JPanel();
		new BoxLayout(pane, BoxLayout.LINE_AXIS);
		
		// The current desc side
		pane2 = new JPanel(new BorderLayout(5, 5));
		pane2.add(new JLabel("Current description"), BorderLayout.NORTH);
		currentDesc = new JTextArea(10, 25);
		currentDesc.setEnabled(false);
		pane2.add(currentDesc, BorderLayout.CENTER);
		pane.add(pane2);
		
		// The new desc side
		pane2 = new JPanel(new BorderLayout(5, 5));
		pane2.add(new JLabel("New description"), BorderLayout.NORTH);
		newDesc = new JTextArea(10, 25);
		pane2.add(newDesc, BorderLayout.CENTER);
		pane.add(pane2);
		
		tabs.addTab("Description", pane);
		
		// Build the image tab
		pane = new JPanel();
		new BoxLayout(pane, BoxLayout.LINE_AXIS);
		
		// The current image side
		pane2 = new JPanel(new BorderLayout(5, 5));
		pane2.add(new JLabel("Current image"), BorderLayout.NORTH);
		currentImage = new JLabel();
		currentImage.setPreferredSize(new Dimension(150, 150));
		pane2.add(currentImage, BorderLayout.CENTER);
		pane.add(pane2);
		
		// The new image side
		pane2 = new JPanel(new BorderLayout(5, 5));
		pane2.add(new JLabel("New image"), BorderLayout.NORTH);
		newImage = new JLabel();
		newImage.setPreferredSize(new Dimension(150, 150));
		pane2.add(newImage, BorderLayout.CENTER);
		JButton button = new JButton("Browse");
		button.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				ItemEditDialog.this.onBrowseImage();
			}
		});
		pane2.add(button, BorderLayout.SOUTH);
		pane.add(pane2);
		
		tabs.addTab("Image", pane);
		
		// Build the ok/cancel buttons
		pane = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		
		okButton = new JButton("OK");
		okButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e)
			{
				onSubmit();
			}
		});
		pane.add(okButton);
		
		cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e)
			{
				onCancel();
			}
		});
		pane.add(cancelButton);
		
		add(pane, BorderLayout.SOUTH);
	}
	
	protected void updateIDField()
    {
		newID.setEnabled(autoGenNewID.isSelected() == false);
    }

	protected void onBrowseImage()
    {
		JFileChooser chooser = new JFileChooser();
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				// Get the input file
				BufferedImage in = ImageIO.read(chooser.getSelectedFile());
				// Create an in-memory byte stream
				ByteArrayOutputStream stream = new ByteArrayOutputStream();
				// And write the image into it as a JPEG
				ImageIO.write(in, "jpg", stream);
				// Make sure the stream is finished taking data
				stream.flush();
				// Place the data in a byte array
				newImageData = stream.toByteArray();
				// And close the stream
				stream.close();
				// And show the image
				newImage.setIcon(new ImageIcon(newImageData));
			}
			catch (Exception e)
			{
				System.out.println(String.format("ItemEditDialog.onBrowseImage: Exception while loading image data.\nMessage: %s.\nTrace:\n",
						e.getMessage()));
				e.printStackTrace();
				JOptionPane.showMessageDialog(this, "Could not load the image", "Error", JOptionPane.ERROR_MESSAGE);
			}
		}
    }

	private JTextField  currentID,
	                    currentQuantity,
	                    currentName,
	                    newID,
	                    newQuantity,
	                    newName;
	private JTextArea   currentDesc,
	                    newDesc;
	private JLabel      currentImage,
	                    newImage;
	private byte[]      currentImageData,
	                    newImageData;
	private JCheckBox   autoGenNewID;
	private JButton     okButton,
	                    cancelButton;
	private Vector<SubmitListener>
	                    listeners;
	private DataEntry   entry;
	private JTabbedPane tabs;
	private int         rowIndex;
}
